{"mappings":"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","sources":["src/script.js"],"sourcesContent":["// Get DOM elements\r\nconst startButton = document.getElementById(\"startGame\");\r\nconst statusText = document.getElementById(\"status\");\r\nconst scoreDisplay = document.getElementById(\"score\");\r\nconst colorButtons = document.querySelectorAll(\".color-button\");\r\n\r\n// Colors and Game Variables\r\nconst colors = [\"red\", \"green\", \"blue\", \"yellow\"];\r\nlet gameSequence = [];\r\nlet userSequence = [];\r\nlet score = 0;\r\nlet gameStarted = false;\r\n\r\n// Frequencies for Mario-style sounds\r\nconst marioFrequencies = {\r\n  red: 330, // E4\r\n  green: 440, // A4\r\n  blue: 554, // C#5\r\n  yellow: 659, // E5\r\n};\r\n\r\n// Play a Mario-style tone using Web Audio API\r\nfunction playMarioSound(color) {\r\n  const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n  const oscillator = audioContext.createOscillator();\r\n  const gainNode = audioContext.createGain();\r\n\r\n  // Set frequency and waveform for retro sound\r\n  oscillator.frequency.setValueAtTime(\r\n    marioFrequencies[color],\r\n    audioContext.currentTime\r\n  );\r\n  oscillator.type = \"square\"; // Retro 'Mario-like' sound\r\n  gainNode.gain.setValueAtTime(0.2, audioContext.currentTime); // Lower volume for pleasant sound\r\n\r\n  oscillator.connect(gainNode);\r\n  gainNode.connect(audioContext.destination);\r\n\r\n  // Short duration for Mario-like effect\r\n  oscillator.start();\r\n  oscillator.stop(audioContext.currentTime + 0.15); // 150ms sound\r\n}\r\n\r\n// Play a \"Game Over\" sound effect\r\nfunction playGameOverSound() {\r\n  const audioContext = new (window.AudioContext || window.webkitAudioContext)();\r\n  const gainNode = audioContext.createGain();\r\n  gainNode.gain.setValueAtTime(0.4, audioContext.currentTime); // Set appropriate volume\r\n\r\n  // Create the first descending tone\r\n  const oscillator1 = audioContext.createOscillator();\r\n  oscillator1.frequency.setValueAtTime(440, audioContext.currentTime); // Start with A4\r\n  oscillator1.frequency.linearRampToValueAtTime(\r\n    220,\r\n    audioContext.currentTime + 0.4\r\n  ); // Descend to A3\r\n  oscillator1.type = \"square\";\r\n\r\n  // Create the second descending tone\r\n  const oscillator2 = audioContext.createOscillator();\r\n  oscillator2.frequency.setValueAtTime(330, audioContext.currentTime + 0.4); // Start with E4\r\n  oscillator2.frequency.linearRampToValueAtTime(\r\n    165,\r\n    audioContext.currentTime + 0.8\r\n  ); // Descend to E3\r\n  oscillator2.type = \"square\";\r\n\r\n  // Connect oscillators to gain node and destination\r\n  oscillator1.connect(gainNode);\r\n  oscillator2.connect(gainNode);\r\n  gainNode.connect(audioContext.destination);\r\n\r\n  // Start and stop the oscillators\r\n  oscillator1.start();\r\n  oscillator1.stop(audioContext.currentTime + 0.4);\r\n  oscillator2.start(audioContext.currentTime + 0.4);\r\n  oscillator2.stop(audioContext.currentTime + 0.8);\r\n}\r\n\r\n// Start or reset the game\r\nstartButton.addEventListener(\"click\", () => {\r\n  if (!gameStarted) {\r\n    playMarioSound(\"green\"); // Play Mario-like sound when game starts\r\n    startGame();\r\n  }\r\n});\r\n\r\n// Button click event listeners\r\ncolorButtons.forEach((button) => {\r\n  button.addEventListener(\"click\", (event) => {\r\n    if (!gameStarted) return;\r\n    const color = event.target.id;\r\n    userSequence.push(color);\r\n    playMarioSound(color); // Play sound for the button\r\n    animateButton(color);\r\n    checkUserInput();\r\n  });\r\n});\r\n\r\n// Start the game\r\nfunction startGame() {\r\n  if (gameStarted) return; // Prevent starting if already in progress\r\n  gameStarted = true;\r\n  gameSequence = [];\r\n  userSequence = [];\r\n  score = 0;\r\n  scoreDisplay.textContent = `Score: ${score}`;\r\n  statusText.textContent = \"Get Ready!\";\r\n  setTimeout(() => {\r\n    nextSequence();\r\n  }, 1000);\r\n}\r\n\r\n// Generate the next sequence\r\nfunction nextSequence() {\r\n  const randomColor = colors[Math.floor(Math.random() * colors.length)];\r\n  gameSequence.push(randomColor);\r\n  animateSequence();\r\n}\r\n\r\n// Animate the sequence\r\nfunction animateSequence() {\r\n  let index = 0;\r\n  const interval = setInterval(() => {\r\n    const color = gameSequence[index];\r\n    animateButton(color);\r\n    playMarioSound(color);\r\n    index++;\r\n    if (index === gameSequence.length) {\r\n      clearInterval(interval);\r\n      userSequence = [];\r\n      statusText.textContent = \"Your Turn!\";\r\n    }\r\n  }, 800);\r\n}\r\n\r\n// Check user input\r\nfunction checkUserInput() {\r\n  const currentIndex = userSequence.length - 1;\r\n  if (userSequence[currentIndex] !== gameSequence[currentIndex]) {\r\n    gameOver();\r\n  } else if (userSequence.length === gameSequence.length) {\r\n    score++;\r\n    scoreDisplay.textContent = `Score: ${score}`;\r\n    statusText.textContent = \"Correct! Next round...\";\r\n    setTimeout(() => {\r\n      userSequence = [];\r\n      nextSequence();\r\n    }, 1000);\r\n  }\r\n}\r\n\r\n// Game Over\r\nfunction gameOver() {\r\n  statusText.textContent = `Game Over! Final Score: ${score}`;\r\n  scoreDisplay.textContent = `Score: ${score}`;\r\n  playGameOverSound(); // Play the Game Over sound effect\r\n  gameStarted = false;\r\n  gameSequence = [];\r\n  userSequence = [];\r\n}\r\n\r\n// Animate the button on click or during sequence\r\nfunction animateButton(color) {\r\n  const button = document.getElementById(color);\r\n  button.classList.add(\"active\");\r\n  setTimeout(() => {\r\n    button.classList.remove(\"active\");\r\n  }, 300);\r\n}\r\n"],"names":[],"version":3,"file":"index.44983732.js.map","sourceRoot":"/__parcel_source_root/"}